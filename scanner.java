/* The following code was generated by JFlex 1.4.3 on 12-05-18 11:33 PM */

package enmaf;
import java_cup.runtime.Symbol;
import java.util.LinkedList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12-05-18 11:33 PM from the specification file
 * <tt>C:/Users/missa/Documents/NetBeansProjects/backup/ENMAF/src/enmaf/Scanner.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FORM = 8;
  public static final int HEADLINE = 6;
  public static final int INPUT = 2;
  public static final int YYINITIAL = 0;
  public static final int IMGLINK = 10;
  public static final int LISTA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\3\1\0\1\2\1\2\22\0\1\41\1\6\1\0"+
    "\5\0\1\4\1\4\1\0\1\0\1\4\1\7\1\4\1\1\1\0"+
    "\1\16\1\16\1\16\1\16\1\16\1\16\3\0\1\4\1\4\1\5"+
    "\1\0\1\10\2\0\1\32\1\34\1\30\1\14\1\27\1\17\1\33"+
    "\1\15\1\22\1\43\1\37\1\12\1\21\1\23\1\11\1\24\1\44"+
    "\1\20\1\26\1\25\1\13\1\40\1\42\1\31\1\35\1\36\1\4"+
    "\1\0\1\4\1\0\1\0\1\0\1\32\1\34\1\30\1\14\1\27"+
    "\1\17\1\33\1\15\1\22\1\43\1\37\1\12\1\21\1\23\1\11"+
    "\1\24\1\44\1\20\1\26\1\25\1\13\1\40\1\42\1\31\1\35"+
    "\1\36\1\4\1\0\1\4\123\0\1\0\37\0\1\0\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\1\1\4\7\1\1\5"+
    "\2\1\1\6\1\1\1\7\2\1\1\10\21\0\1\5"+
    "\33\0\1\11\16\0\1\5\12\0\1\12\4\0\1\13"+
    "\16\0\1\14\50\0\1\15\46\0\1\16\35\0\1\17"+
    "\17\0\1\5\24\0\1\20\11\0\1\21\16\0\1\22"+
    "\25\0\1\5\6\0\1\23\7\0\1\5\11\0\1\24"+
    "\2\0\1\25\15\0\1\26\12\0\1\27\13\0\1\24"+
    "\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\336\0\u0128\0\336\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1"+
    "\0\u0206\0\u022b\0\336\0\u0103\0\u0250\0\336\0\u0275\0\336"+
    "\0\u029a\0\u02bf\0\336\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378"+
    "\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0"+
    "\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8"+
    "\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0"+
    "\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818"+
    "\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940"+
    "\0\336\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43"+
    "\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b"+
    "\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93"+
    "\0\u0cb8\0\u0cdd\0\336\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\336"+
    "\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99"+
    "\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\336\0\u0f9c"+
    "\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4"+
    "\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec"+
    "\0\u1211\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314"+
    "\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c"+
    "\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\336"+
    "\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u161d\0\u1642\0\u1667"+
    "\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745\0\u176a\0\u178f"+
    "\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7"+
    "\0\u18dc\0\u1901\0\u1926\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df"+
    "\0\u1a04\0\u1a29\0\u1a4e\0\u1a73\0\u1a98\0\u1abd\0\336\0\u1ae2"+
    "\0\u1b07\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u1c0a"+
    "\0\u1c2f\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3\0\u1ce8\0\u1d0d\0\u1d32"+
    "\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb\0\u1e10\0\u1e35\0\u1e5a"+
    "\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\336\0\u1f13\0\u1f38\0\u1f5d"+
    "\0\u1f82\0\u1fa7\0\u1fcc\0\u1ff1\0\u2016\0\u203b\0\u2060\0\u2085"+
    "\0\u20aa\0\u20cf\0\u20f4\0\u2119\0\u1b07\0\u213e\0\u2163\0\u2188"+
    "\0\u21ad\0\u21d2\0\u21f7\0\u221c\0\u2241\0\u2266\0\u228b\0\u22b0"+
    "\0\u22d5\0\u22fa\0\u231f\0\u2344\0\u2369\0\u238e\0\u23b3\0\u23d8"+
    "\0\u23fd\0\336\0\u2422\0\u2447\0\u246c\0\u2491\0\u24b6\0\u24db"+
    "\0\u2500\0\u2525\0\u254a\0\336\0\u256f\0\u2594\0\u25b9\0\u25de"+
    "\0\u2603\0\u2628\0\u264d\0\u2672\0\u2697\0\u26bc\0\u26e1\0\u2706"+
    "\0\u272b\0\u2750\0\336\0\u2775\0\u279a\0\u27bf\0\u27e4\0\u2809"+
    "\0\u282e\0\u2853\0\u2878\0\u289d\0\u28c2\0\u28e7\0\u290c\0\u2931"+
    "\0\u2956\0\u297b\0\u29a0\0\u29c5\0\u29ea\0\u2a0f\0\u2a34\0\u2a59"+
    "\0\u0612\0\u2a7e\0\u2aa3\0\u2ac8\0\u2aed\0\u2b12\0\u2b37\0\336"+
    "\0\u2b5c\0\u2b81\0\u2ba6\0\u2bcb\0\u2bf0\0\u2c15\0\u2c3a\0\u18b7"+
    "\0\u2c5f\0\u2c84\0\u2ca9\0\u2cce\0\u2cf3\0\u2d18\0\u2d3d\0\u2d62"+
    "\0\u2d87\0\336\0\u2dac\0\u2dd1\0\336\0\u2df6\0\u2e1b\0\u2e40"+
    "\0\u2e65\0\u2e8a\0\u2eaf\0\u2ed4\0\u2ef9\0\u2f1e\0\u2f43\0\u2f68"+
    "\0\u2f8d\0\u2fb2\0\u1a98\0\u2fd7\0\u2ffc\0\u3021\0\u3046\0\u306b"+
    "\0\u3090\0\u30b5\0\u30da\0\u30ff\0\u3124\0\336\0\u3149\0\u316e"+
    "\0\u3193\0\u029a\0\u31b8\0\u31dd\0\u3202\0\u3227\0\u324c\0\u3271"+
    "\0\u3296\0\u0612\0\u32bb\0\u32e0\0\u3305\0\u332a\0\u334f\0\u3374"+
    "\0\u3399\0\u33be\0\u33e3\0\u3408\0\u342d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\2\10\1\11\1\12\2\7\1\13\3\7\1\14"+
    "\1\15\5\7\1\16\1\7\1\17\1\20\5\7\1\21"+
    "\4\7\1\10\5\7\2\10\1\11\1\22\2\7\1\23"+
    "\3\7\1\14\1\15\5\7\1\16\1\7\1\17\1\20"+
    "\5\7\1\21\4\7\1\10\5\7\1\24\1\10\1\7"+
    "\1\25\6\7\1\14\1\15\5\7\1\16\1\7\1\17"+
    "\1\20\5\7\1\21\4\7\1\24\5\7\1\24\1\10"+
    "\1\7\1\22\2\7\1\26\3\7\1\14\1\15\5\7"+
    "\1\16\1\7\1\17\1\20\5\7\1\21\4\7\1\24"+
    "\5\7\1\24\1\10\1\7\1\27\2\7\1\30\3\7"+
    "\1\14\1\15\5\7\1\16\1\7\1\17\1\20\5\7"+
    "\1\21\4\7\1\24\4\7\1\31\2\10\1\11\1\32"+
    "\2\7\1\33\3\7\1\14\1\15\5\7\1\16\1\7"+
    "\1\17\1\20\5\7\1\21\4\7\1\10\3\7\47\0"+
    "\2\10\35\0\1\10\4\0\1\34\4\0\1\35\2\0"+
    "\1\36\1\37\1\40\1\41\1\42\1\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\0\1\55\1\0\1\56\2\0\1\57\1\60\1\0"+
    "\1\61\1\0\1\62\32\0\1\63\32\0\1\64\56\0"+
    "\1\65\34\0\1\66\42\0\1\67\1\0\1\70\1\0"+
    "\1\71\1\72\51\0\1\73\13\0\1\34\4\0\1\35"+
    "\2\0\1\74\1\37\1\75\1\76\1\77\1\0\1\100"+
    "\1\44\1\45\1\101\1\47\1\50\1\102\1\103\1\53"+
    "\1\54\1\0\1\55\1\0\1\56\2\0\1\57\1\60"+
    "\1\0\1\61\1\0\1\62\1\0\1\104\4\0\1\35"+
    "\2\0\1\74\1\105\1\75\1\106\1\77\1\0\1\100"+
    "\1\44\1\45\1\101\1\47\1\50\1\102\1\103\1\53"+
    "\1\54\1\0\1\55\1\0\1\56\2\0\1\57\1\60"+
    "\1\0\1\61\1\0\1\62\1\0\1\107\4\0\1\35"+
    "\2\0\1\110\1\37\1\75\1\76\1\77\1\0\1\100"+
    "\1\44\1\45\1\101\1\47\1\50\1\102\1\103\1\53"+
    "\1\54\1\0\1\55\1\0\1\56\2\0\1\57\1\60"+
    "\1\0\1\61\1\0\1\62\10\0\1\111\35\0\1\112"+
    "\4\0\1\35\2\0\1\74\1\37\1\75\1\76\1\77"+
    "\1\0\1\113\1\44\1\45\1\101\1\47\1\50\1\114"+
    "\1\103\1\53\1\115\1\0\1\55\1\0\1\56\2\0"+
    "\1\57\1\60\1\0\1\61\1\0\1\62\11\0\1\116"+
    "\1\117\1\75\1\76\1\120\1\0\1\121\1\44\1\122"+
    "\1\123\1\47\1\124\1\102\1\125\1\126\1\127\1\0"+
    "\1\130\1\0\1\131\2\0\1\57\1\60\1\0\1\61"+
    "\1\0\1\62\7\0\1\132\4\0\1\133\42\0\1\134"+
    "\1\135\10\0\1\136\7\0\1\137\32\0\1\140\4\0"+
    "\1\141\2\0\1\142\22\0\1\143\1\0\1\134\44\0"+
    "\1\134\4\0\1\144\2\0\1\145\4\0\1\146\2\0"+
    "\1\147\30\0\1\150\1\0\1\151\4\0\1\152\1\0"+
    "\1\153\3\0\1\154\22\0\1\155\10\0\1\156\35\0"+
    "\1\157\10\0\2\62\46\0\1\160\2\0\1\161\22\0"+
    "\1\143\6\0\1\162\1\0\1\163\1\0\1\164\32\0"+
    "\1\165\20\0\1\166\22\0\1\167\7\0\1\170\11\0"+
    "\1\171\27\0\1\172\1\0\1\173\1\174\1\0\1\175"+
    "\2\0\1\75\1\0\1\176\2\0\1\177\1\0\1\200"+
    "\20\0\1\143\1\201\1\0\1\202\5\0\1\203\2\0"+
    "\1\204\1\205\1\0\1\206\1\207\1\0\1\210\5\0"+
    "\1\211\25\0\1\212\34\0\1\213\10\0\1\214\7\0"+
    "\1\215\25\0\1\216\1\217\3\0\1\220\5\0\1\221"+
    "\5\0\1\61\20\0\1\143\1\222\1\223\1\224\1\225"+
    "\3\0\1\75\1\0\1\226\7\0\1\227\41\0\1\230"+
    "\4\0\1\231\32\0\1\232\7\0\1\233\46\0\1\233"+
    "\20\0\1\23\61\0\1\234\46\0\1\235\36\0\1\236"+
    "\50\0\1\237\47\0\1\240\52\0\1\236\40\0\1\241"+
    "\47\0\1\242\37\0\1\243\27\0\1\135\10\0\1\136"+
    "\7\0\1\137\20\0\1\143\53\0\1\144\2\0\1\145"+
    "\4\0\1\146\2\0\1\147\32\0\1\151\4\0\1\152"+
    "\1\0\1\153\3\0\1\154\22\0\1\244\10\0\1\156"+
    "\32\0\1\143\6\0\1\162\1\0\1\245\1\0\1\246"+
    "\36\0\1\172\1\0\1\173\1\174\1\0\1\175\2\0"+
    "\1\75\1\0\1\247\4\0\1\200\20\0\1\143\1\201"+
    "\1\0\1\202\5\0\1\203\2\0\1\204\1\205\1\0"+
    "\1\250\1\207\1\0\1\210\5\0\1\211\15\0\1\251"+
    "\1\252\1\253\1\254\1\120\1\0\1\121\1\44\1\122"+
    "\1\123\1\47\1\124\1\102\1\125\1\126\1\127\1\0"+
    "\1\130\1\0\1\131\2\0\1\57\1\60\1\0\1\61"+
    "\1\0\1\62\22\0\1\255\4\0\1\141\2\0\1\142"+
    "\26\0\1\256\2\0\1\144\2\0\1\145\2\0\1\256"+
    "\1\0\1\146\2\0\1\147\23\0\1\257\1\117\1\75"+
    "\1\76\1\120\1\0\1\260\1\44\1\122\1\123\1\47"+
    "\1\124\1\261\1\262\1\126\1\127\1\0\1\130\1\0"+
    "\1\131\2\0\1\57\1\60\1\0\1\61\1\0\1\62"+
    "\13\0\1\135\10\0\1\263\7\0\1\137\21\0\1\116"+
    "\1\117\1\75\1\76\1\120\1\0\1\264\1\44\1\122"+
    "\1\123\1\47\1\124\1\265\1\125\1\126\1\266\1\0"+
    "\1\130\1\0\1\131\2\0\1\57\1\60\1\0\1\61"+
    "\1\0\1\62\11\0\1\267\10\0\1\156\36\0\1\270"+
    "\1\271\1\0\1\173\1\272\1\0\1\175\2\0\1\75"+
    "\1\0\1\247\4\0\1\200\21\0\1\213\10\0\1\214"+
    "\7\0\1\273\25\0\1\135\10\0\1\136\47\0\1\141"+
    "\2\0\1\142\30\0\1\274\1\0\1\151\4\0\1\152"+
    "\1\0\1\153\3\0\1\154\22\0\1\275\10\0\1\156"+
    "\51\0\1\276\2\0\1\277\22\0\1\143\6\0\1\162"+
    "\3\0\1\300\31\0\1\167\7\0\1\170\34\0\1\143"+
    "\1\201\1\0\1\202\5\0\1\203\2\0\1\204\1\205"+
    "\1\0\1\250\1\301\1\0\1\210\5\0\1\211\25\0"+
    "\1\62\34\0\1\302\10\0\1\214\7\0\1\215\25\0"+
    "\1\216\1\217\3\0\1\303\5\0\1\221\5\0\1\61"+
    "\20\0\1\143\1\304\1\223\1\224\1\225\3\0\1\75"+
    "\1\0\1\226\31\0\1\305\46\0\1\306\43\0\1\307"+
    "\61\0\1\310\44\0\1\311\62\0\1\312\24\0\1\313"+
    "\54\0\1\314\45\0\1\315\33\0\1\62\53\0\1\316"+
    "\5\0\1\151\16\0\1\62\12\0\1\317\44\0\1\320"+
    "\27\0\1\167\55\0\1\321\55\0\1\322\32\0\1\323"+
    "\35\0\1\324\6\0\1\325\2\0\1\326\50\0\1\327"+
    "\3\0\1\330\45\0\1\331\33\0\1\332\1\0\1\333"+
    "\37\0\1\334\1\0\1\144\1\0\1\23\1\335\37\0"+
    "\1\336\57\0\1\13\35\0\1\337\1\0\1\62\44\0"+
    "\1\340\56\0\1\62\15\0\1\341\15\0\1\151\35\0"+
    "\1\342\53\0\1\343\26\0\1\344\43\0\1\345\21\0"+
    "\1\346\33\0\1\347\3\0\1\350\50\0\1\351\47\0"+
    "\1\352\21\0\1\304\46\0\1\353\52\0\1\354\2\0"+
    "\1\62\7\0\1\75\42\0\1\355\44\0\1\356\32\0"+
    "\1\357\14\0\1\350\21\0\1\360\15\0\1\361\34\0"+
    "\1\362\45\0\1\363\56\0\1\62\21\0\1\23\23\0"+
    "\1\364\22\0\1\365\1\0\1\347\4\0\1\366\50\0"+
    "\1\347\42\0\1\367\35\0\1\370\44\0\1\371\55\0"+
    "\1\372\1\0\1\373\37\0\1\374\36\0\1\375\41\0"+
    "\1\376\10\0\1\377\47\0\1\u0100\30\0\1\62\10\0"+
    "\1\62\55\0\1\75\37\0\1\u0101\53\0\1\u0102\23\0"+
    "\1\62\44\0\1\u0103\50\0\1\62\56\0\1\240\31\0"+
    "\1\240\54\0\1\240\27\0\1\236\55\0\1\240\33\0"+
    "\1\u0104\71\0\1\u0105\16\0\1\324\6\0\1\u0106\2\0"+
    "\1\326\54\0\1\23\35\0\1\u0107\1\0\1\62\47\0"+
    "\1\u0108\43\0\1\361\26\0\1\u0109\1\135\10\0\1\136"+
    "\42\0\1\256\4\0\1\141\2\0\1\142\22\0\1\143"+
    "\1\0\1\u0109\44\0\1\u0109\1\0\1\256\2\0\1\144"+
    "\2\0\1\145\2\0\1\256\1\0\1\146\2\0\1\147"+
    "\22\0\1\u010a\12\0\1\313\31\0\1\u010a\47\0\1\135"+
    "\10\0\1\u010b\31\0\1\u010c\10\0\1\156\37\0\1\172"+
    "\1\0\1\173\1\174\1\0\1\175\2\0\1\75\1\0"+
    "\1\u010d\4\0\1\200\20\0\1\143\1\201\1\0\1\202"+
    "\5\0\1\203\2\0\1\204\1\205\1\0\1\u010e\1\301"+
    "\1\0\1\210\5\0\1\211\31\0\1\u010f\30\0\1\u0110"+
    "\10\0\1\156\36\0\1\270\1\271\1\0\1\173\1\174"+
    "\1\0\1\175\2\0\1\75\1\0\1\247\2\0\1\u0111"+
    "\1\0\1\200\21\0\1\302\10\0\1\214\7\0\1\273"+
    "\23\0\1\324\6\0\1\u0106\2\0\1\u0112\31\0\1\33"+
    "\44\0\1\33\16\0\1\343\25\0\1\33\21\0\1\346"+
    "\35\0\1\367\1\u0113\30\0\1\u0114\45\0\1\324\11\0"+
    "\1\u0115\44\0\1\332\1\0\1\u0116\37\0\1\334\1\0"+
    "\1\144\2\0\1\335\45\0\1\62\36\0\1\u0117\36\0"+
    "\1\311\1\0\1\347\4\0\1\366\50\0\1\u0118\1\0"+
    "\1\u0119\31\0\1\331\30\0\7\305\1\u011a\35\305\30\0"+
    "\1\u011b\40\0\1\u011c\53\0\1\154\40\0\1\326\54\0"+
    "\1\23\34\0\1\u011d\44\0\1\321\27\0\1\u011e\64\0"+
    "\1\u011f\44\0\1\u0120\24\0\1\62\46\0\1\u0121\41\0"+
    "\1\u0122\60\0\1\u0116\40\0\1\u0123\50\0\1\23\31\0"+
    "\1\u0124\45\0\1\u0125\14\0\1\u0126\51\0\1\62\22\0"+
    "\1\62\60\0\1\233\2\0\1\23\51\0\1\62\22\0"+
    "\1\62\61\0\1\u0127\25\0\1\u0128\61\0\1\301\47\0"+
    "\1\371\43\0\1\u0106\44\0\1\231\23\0\1\u0115\63\0"+
    "\1\334\43\0\1\62\27\0\1\347\57\0\1\u0129\31\0"+
    "\1\u012a\52\0\1\u012b\45\0\1\u012c\35\0\1\u012d\55\0"+
    "\1\u012e\32\0\1\u012f\62\0\1\u0130\42\0\1\u0131\41\0"+
    "\1\u0132\46\0\1\62\47\0\1\u0133\36\0\1\u0134\63\0"+
    "\1\u0135\26\0\1\u0136\42\0\1\u0137\46\0\1\u0138\54\0"+
    "\1\23\26\0\1\347\65\0\1\u0139\37\0\1\u013a\37\0"+
    "\1\u013b\46\0\1\u013c\46\0\1\23\50\0\1\u013d\40\0"+
    "\1\u0136\44\0\1\150\50\0\1\u013e\32\0\1\23\36\0"+
    "\1\326\56\0\1\u013f\27\0\1\u0140\61\0\1\u0141\30\0"+
    "\1\324\6\0\1\u0142\2\0\1\u0115\52\0\1\u0143\25\0"+
    "\1\u0144\15\0\1\361\36\0\1\u0145\10\0\1\154\22\0"+
    "\1\324\11\0\1\u0146\55\0\1\u0147\35\0\1\u0148\44\0"+
    "\1\u0149\44\0\1\62\46\0\1\233\37\0\1\u014a\44\0"+
    "\1\u014b\54\0\1\62\12\0\7\305\1\u014c\35\305\25\0"+
    "\1\u014d\32\0\1\u0115\54\0\1\231\32\0\1\211\55\0"+
    "\1\u014e\32\0\1\23\1\0\1\u014f\42\0\1\23\16\0"+
    "\1\233\30\0\1\363\45\0\1\u0150\50\0\1\347\56\0"+
    "\1\u0151\33\0\1\347\50\0\1\u0152\51\0\1\u0153\41\0"+
    "\1\13\45\0\1\347\46\0\1\u0154\24\0\1\75\42\0"+
    "\1\u0155\57\0\1\211\51\0\1\u0156\36\0\1\u013c\46\0"+
    "\1\326\34\0\1\23\62\0\1\u011d\44\0\1\300\23\0"+
    "\1\62\62\0\1\u0157\45\0\1\u0158\53\0\1\u0159\44\0"+
    "\1\75\16\0\1\144\62\0\1\144\35\0\1\u015a\56\0"+
    "\1\u015b\34\0\1\u015c\10\0\1\154\32\0\1\u015d\50\0"+
    "\1\u015e\46\0\1\u015f\26\0\1\u0160\60\0\1\270\31\0"+
    "\1\u0161\54\0\1\u0162\46\0\1\u0115\50\0\1\350\14\0"+
    "\7\305\1\u014c\1\u0163\34\305\35\0\1\u0164\21\0\1\300"+
    "\54\0\1\u0165\50\0\1\u0166\42\0\1\361\40\0\1\u0167"+
    "\44\0\1\331\51\0\1\u0168\45\0\1\300\30\0\1\u0169"+
    "\76\0\1\u016a\11\0\1\u016b\53\0\1\u016c\35\0\1\u016d"+
    "\43\0\1\u016e\66\0\1\u016f\42\0\1\u0170\37\0\1\u0171"+
    "\50\0\1\u0172\26\0\1\u0173\57\0\1\u0101\46\0\1\u0115"+
    "\45\0\1\u0115\44\0\1\u0174\25\0\1\u0152\63\0\1\u0175"+
    "\30\0\1\u0176\44\0\1\u0177\60\0\1\u0119\40\0\1\30"+
    "\41\0\1\u0178\51\0\1\u0179\27\0\1\30\57\0\1\270"+
    "\53\0\1\u017a\22\0\1\u017b\45\0\1\u017c\56\0\1\u017d"+
    "\50\0\1\u017e\25\0\1\u0123\75\0\1\23\30\0\1\u017f"+
    "\33\0\1\u0180\62\0\1\u015d\41\0\1\151\24\0\1\u0181"+
    "\65\0\1\u0182\25\0\1\u0183\45\0\1\u0184\43\0\1\u0185"+
    "\53\0\1\240\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13394];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\1\1\1\11\7\1\1\11"+
    "\2\1\1\11\1\1\1\11\2\1\1\11\21\0\1\1"+
    "\33\0\1\11\16\0\1\1\12\0\1\11\4\0\1\11"+
    "\16\0\1\11\50\0\1\11\46\0\1\11\35\0\1\11"+
    "\17\0\1\1\24\0\1\11\11\0\1\11\16\0\1\11"+
    "\25\0\1\1\6\0\1\11\7\0\1\1\11\0\1\11"+
    "\2\0\1\11\15\0\1\1\12\0\1\11\13\0\1\1"+
    "\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/*contamos comentarios y eso.*/
public static int htmltag=0;
public static int htmlcom=0;
public static int forms=0;

/* Lista con errores sintacticos */
public LinkedList<Errores> lista=new LinkedList<Errores>();
/* Metodo que es llamado al encontrar un error lexico */
private void ErrorScan(int linea, int columna, String valor){
lista.add(new Errores(linea, columna, "Error lexico en el caracter "+valor) );}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { htmltag=htmltag+1;return new Symbol(simbolo.nume, yychar,yyline,new String(yytext()));
          }
        case 24: break;
        case 5: 
          { htmltag=htmltag+1;return new Symbol(simbolo.estdoc, yychar,yyline,new String(yytext()));
          }
        case 25: break;
        case 18: 
          { htmltag=htmltag+1;yybegin(FORM); return new Symbol(simbolo.forms, yychar,yyline,new String(yytext()));
          }
        case 26: break;
        case 19: 
          { htmltag=htmltag+1;yybegin(YYINITIAL); {return new Symbol(simbolo.listas, yychar,yyline,new String(yytext())); }
          }
        case 27: break;
        case 4: 
          { htmltag=htmltag+1;yybegin(IMGLINK); return new Symbol(simbolo.imglink, yychar,yyline,new String(yytext()));
          }
        case 28: break;
        case 14: 
          { htmltag=htmltag+1;yybegin(LISTA); {return new Symbol(simbolo.listas, yychar,yyline,new String(yytext())); }
          }
        case 29: break;
        case 15: 
          { htmltag=htmltag+1;return new Symbol(simbolo.imglink, yychar,yyline,new String(yytext()));
          }
        case 30: break;
        case 22: 
          { htmlcom=htmlcom+1; return new Symbol(simbolo.htmlcomment, yychar,yyline,new String(yytext()));
          }
        case 31: break;
        case 13: 
          { htmltag=htmltag+1;return new Symbol(simbolo.add, yychar,yyline,new String(yytext()));
          }
        case 32: break;
        case 7: 
          { htmltag=htmltag+1; return new Symbol(simbolo.forms, yychar,yyline,new String(yytext()));
          }
        case 33: break;
        case 8: 
          { htmltag=htmltag+1; return new Symbol(simbolo.imglink, yychar,yyline,new String(yytext()));
          }
        case 34: break;
        case 2: 
          { return new Symbol(simbolo.finalesydemas, yychar,yyline,new String(yytext()));
          }
        case 35: break;
        case 17: 
          { htmltag=htmltag+1;yybegin(YYINITIAL); return new Symbol(simbolo.esttxt, yychar,yyline,new String(yytext()));
          }
        case 36: break;
        case 20: 
          { htmltag=htmltag+1;yybegin(FORM); return new Symbol(simbolo.esttxt, yychar,yyline,new String(yytext()));
          }
        case 37: break;
        case 6: 
          { yybegin(YYINITIAL); return new Symbol(simbolo.esttxt, yychar,yyline,new String(yytext()));
          }
        case 38: break;
        case 16: 
          { htmltag=htmltag+1;{return new Symbol(simbolo.listas, yychar,yyline,new String(yytext())); }
          }
        case 39: break;
        case 9: 
          { htmltag=htmltag+1;yybegin(YYINITIAL); return new Symbol(simbolo.imglink, yychar,yyline,new String(yytext()));
          }
        case 40: break;
        case 23: 
          { htmltag=htmltag+1;yybegin(YYINITIAL); return new Symbol(simbolo.forms, yychar,yyline,new String(yytext()));
          }
        case 41: break;
        case 12: 
          { htmltag=htmltag+1;return new Symbol(simbolo.esttxt, yychar,yyline,new String(yytext()));
          }
        case 42: break;
        case 11: 
          { htmltag=htmltag+1;yybegin(HEADLINE); return new Symbol(simbolo.esttxt, yychar,yyline,new String(yytext()));
          }
        case 43: break;
        case 3: 
          { return new Symbol(simbolo.esp, yychar,yyline,new String(yytext()));
          }
        case 44: break;
        case 10: 
          { htmltag=htmltag+1;return new Symbol(simbolo.txtformat, yychar,yyline,new String(yytext()));
          }
        case 45: break;
        case 1: 
          { return new Symbol(simbolo.otros, yychar,yyline,new String(yytext()));
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
